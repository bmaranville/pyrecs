#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Mon Feb 11 18:10:56 2013

import site, os
site.addsitedir(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

import wx
import pyrecs
import pyrecs.drivers
import tc_config
import time
import pprint

# begin wxGlade: extracode
# end wxGlade


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.tc_label = wx.StaticText(self, -1, "Select temperature controller")
        self.tempctl_choice = wx.Choice(self, -1, choices=[])
        self.cfg_tempct_btn = wx.Button(self, -1, "Reconfigure")
        self.file_chooser = wx.Button(self, -1, "Choose output file")
        self.file_label = wx.StaticText(self, -1, "Undefined", style=wx.ALIGN_CENTRE)
        self.time_button = wx.Button(self, -1, "Set logging frequency (s)")
        self.time_label = wx.StaticText(self, -1, "Undefined")
        self.status_label = wx.StaticText(self, -1, "Stopped")
        self.info_label = wx.StaticText(self, -1, "")
        self.start_button = wx.Button(self, -1, "Start")
        self.stop_button = wx.Button(self, -1, "Stop")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHOICE, self.onTempctlChoice, self.tempctl_choice)
        self.Bind(wx.EVT_BUTTON, self.tcReconfigure, self.cfg_tempct_btn)
        self.Bind(wx.EVT_BUTTON, self.onSaveFile, self.file_chooser)
        self.Bind(wx.EVT_BUTTON, self.onSetFrequency, self.time_button)
        self.Bind(wx.EVT_BUTTON, self.onStart, self.start_button)
        self.Bind(wx.EVT_BUTTON, self.onStop, self.stop_button)
        # end wxGlade
        self.file_path = None
        self.time_constant = None
        self.temp_controller = None
        
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onTimer, self.timer)
        #self.timer.Start(1000)

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("Temperature Logger")
        self.cfg_tempct_btn.Enable(False)
        self.status_label.SetForegroundColour(wx.Colour(255, 0, 0))
        self.status_label.SetFont(wx.Font(24, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        # end wxGlade
        tdevices = pyrecs.drivers.temperature_controllers
        self.tempctl_choice.SetItems([tc[0] for tc in tdevices])

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7.Add(self.tc_label, 0, wx.TOP | wx.ALIGN_BOTTOM, 10)
        sizer_5.Add(self.tempctl_choice, 0, 0, 0)
        sizer_5.Add(self.cfg_tempct_btn, 0, 0, 0)
        sizer_7.Add(sizer_5, 1, wx.BOTTOM | wx.EXPAND , 10)
        sizer_2.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_4.Add(self.file_chooser, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.file_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_4, 1, wx.TOP | wx.BOTTOM | wx.EXPAND, 0)
        sizer_6.Add(self.time_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(self.time_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_6, 1, wx.TOP | wx.BOTTOM | wx.EXPAND, 0)
        sizer_2.Add(self.status_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(self.info_label, 0, wx.ALIGN_CENTER_HORIZONTAL , 0)
        sizer_3.Add(self.start_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_3.Add(self.stop_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(sizer_3, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(sizer_2, 1, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def onSetFrequency(self, event):
        dlg = wx.NumberEntryDialog(
            self, message="Set the time (seconds) between logging events",
            prompt="t:",
            caption="Time constant (s)",
            value=60.,
            min=1, max=100000,
            )
        if dlg.ShowModal() == wx.ID_OK:
            result = dlg.GetValue()
            #print "You chose the following file(s):", path
            self.time_label.SetLabel(str(result))
            self.GetSizer().Fit(self)
            self.time_constant = result
        dlg.Destroy()
        
    def onSaveFile(self, event):
        """
        Create and show the Open FileDialog
        """
        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultFile=self.file_path if self.file_path is not None else "",
            #wildcard=wildcard,
            #style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT,
            style=wx.FD_SAVE,
            )
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.file_label.SetLabel(path)
            self.file_label.SetToolTipString(path)
            self.__do_layout()
            self.file_path = path
        dlg.Destroy()


    def onTempctlChoice(self, event):  # wxGlade: MainFrame.<event_handler>
        devicenum = event.GetSelection()
        #devicenum = kwds['devicenum']
        selection = pyrecs.drivers.temperature_controllers[devicenum]
        driver_module = __import__('pyrecs.drivers.'+selection[1], fromlist=['not_empty'])
        driver = getattr(driver_module, selection[2])
        self.temp_controller = driver()
        self.cfg_tempct_btn.Enable(True)
        event.Skip()

    def tcReconfigure(self, event):  # wxGlade: MainFrame.<event_handler>
        conf_dlg = tc_config.MyDialog(self, device=self.temp_controller)
        conf_dlg.ShowModal()
        event.Skip()
        
    def onStart(self, event):
        """ start logging """
        if self.temp_controller is None or self.file_path is None or self.time_constant is None:
            print self.temp_controller, self.file_path, self.time_constant
            msg = wx.MessageDialog(None, 'Must specify path, device and time before starting', 'error', wx.OK | wx.ICON_ERROR)
            msg.ShowModal()
            msg.Destroy()
            return            
        self.writeHeader() # put column labels up
        self.status_label.SetForegroundColour(wx.Colour(0, 255, 64))
        self.status_label.SetLabel('Started')
        self.timer.Start(self.time_constant * 1000) # s to ms
        event.Skip()
    
    def onStop(self, event):
        """ stop logging """
        self.timer.Stop()
        self.status_label.SetForegroundColour(wx.Colour(255, 0, 0))
        self.status_label.SetLabel('Stopped')
        event.Skip()
    
    def onTimer(self, event):
        tc_state = self.temp_controller.getState()
        self.writePoint(tc_state)
        ppstr = pprint.pformat(tc_state)
        self.info_label.SetLabel('Last read: ' + time.ctime() + '\n' + ppstr)
        self.__do_layout()
        event.Skip()
        
    def writeHeader(self):
        tc = self.temp_controller
        record = tc.settings['record']
        readouts = tc.valid_settings['record'].copy()
        if 'all' in readouts: readouts.pop('all') # everything but "all"
        readout_keys = readouts.keys()
        readout_keys.sort()
        if record == 'all':
            col_labels = [tc.valid_settings['record'][k] for k in readout_keys]
        else:
            col_labels = [tc.valid_settings['record'][record]]
        col_labels.extend(['Timestamp', 'Date'])
        self.col_labels = col_labels
        outfile = open(self.file_path, 'a')
        outfile.write('#' + tc.label + '\n')
        outfile.write('#' + str(tc.settings) + '\n')
        outfile.write("#" + "\t".join(col_labels) + '\n')
        outfile.close()
        
    def writePoint(self, state):
        # add some data:
        state['Timestamp'] = '%.3f' % (time.time(),) # round to milliseconds place
        state['Date'] = '"' + time.ctime() + '"'
        data = [str(state[k]) for k in self.col_labels]
        open(self.file_path, 'a').write("\t".join(data) + '\n')
        
        

# end of class MainFrame
class MyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = MainFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1
        
    

# end of class MyApp

if __name__ == "__main__":
    TemperatureLogger = MyApp(0)
    TemperatureLogger.MainLoop()
